"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./");
class WorkflowDataProxy {
    constructor(workflow, runExecutionData, runIndex, itemIndex, activeNodeName, connectionInputData) {
        this.workflow = workflow;
        this.runExecutionData = runExecutionData;
        this.runIndex = runIndex;
        this.itemIndex = itemIndex;
        this.activeNodeName = activeNodeName;
        this.connectionInputData = connectionInputData;
    }
    nodeContextGetter(nodeName) {
        const that = this;
        const node = this.workflow.nodes[nodeName];
        return new Proxy({}, {
            ownKeys(target) {
                if (Reflect.ownKeys(target).length === 0) {
                    Object.assign(target, _1.NodeHelpers.getContext(that.runExecutionData, 'node', node));
                }
                return Reflect.ownKeys(target);
            },
            get(target, name, receiver) {
                name = name.toString();
                const contextData = _1.NodeHelpers.getContext(that.runExecutionData, 'node', node);
                if (!contextData.hasOwnProperty(name)) {
                    throw new Error(`Could not find parameter "${name}" on context of node "${nodeName}"`);
                }
                return contextData[name];
            }
        });
    }
    nodeParameterGetter(nodeName) {
        const that = this;
        const node = this.workflow.nodes[nodeName];
        return new Proxy(node.parameters, {
            ownKeys(target) {
                return Reflect.ownKeys(target);
            },
            get(target, name, receiver) {
                name = name.toString();
                if (!node.parameters.hasOwnProperty(name)) {
                    throw new Error(`Could not find parameter "${name}" on node "${nodeName}"`);
                }
                const returnValue = node.parameters[name];
                if (typeof returnValue === 'string' && returnValue.charAt(0) === '=') {
                    return that.workflow.getParameterValue(returnValue, that.runExecutionData, that.runIndex, that.itemIndex, that.activeNodeName, that.connectionInputData);
                }
                return returnValue;
            }
        });
    }
    nodeDataGetter(nodeName, shortSyntax = false) {
        const that = this;
        const node = this.workflow.nodes[nodeName];
        if (!node) {
            throw new Error(`The node "${nodeName}" does not exist!`);
        }
        return new Proxy({}, {
            get(target, name, receiver) {
                name = name.toString();
                if (['binary', 'data'].includes(name)) {
                    let executionData;
                    if (shortSyntax === false) {
                        if (that.runExecutionData === null) {
                            throw new Error(`Workflow did not run so do not have any execution-data.`);
                        }
                        if (!that.runExecutionData.resultData.runData.hasOwnProperty(nodeName)) {
                            throw new Error(`No execution data found for node "${nodeName}"`);
                        }
                        if (that.runExecutionData.resultData.runData[nodeName].length < that.runIndex) {
                            throw new Error(`No execution data found for run "${that.runIndex}" of node "${nodeName}"`);
                        }
                        const taskData = that.runExecutionData.resultData.runData[nodeName][that.runIndex].data;
                        if (taskData.main === null || !taskData.main.length || taskData.main[0] === null) {
                            throw new Error(`No data found from "main" input.`);
                        }
                        executionData = taskData.main[0];
                    }
                    else {
                        executionData = that.connectionInputData;
                    }
                    if (executionData.length <= that.itemIndex) {
                        throw new Error(`No data found for item-index: "${that.itemIndex}"`);
                    }
                    if (name === 'data') {
                        return executionData[that.itemIndex].json;
                    }
                    else if (name === 'binary') {
                        if (!executionData[that.itemIndex].binary) {
                            throw new Error(`No binary data for node "${nodeName}" has been found!`);
                        }
                        const returnData = {};
                        const binaryKeyData = executionData[that.itemIndex].binary;
                        for (const keyName of Object.keys(binaryKeyData)) {
                            returnData[keyName] = {};
                            const binaryData = binaryKeyData[keyName];
                            for (const propertyName in binaryData) {
                                if (propertyName === 'data') {
                                    continue;
                                }
                                returnData[keyName][propertyName] = binaryData[propertyName];
                            }
                        }
                        return returnData;
                    }
                }
                else if (name === 'context') {
                    return that.nodeContextGetter(nodeName);
                }
                else if (name === 'parameter') {
                    return that.nodeParameterGetter(nodeName);
                }
                return Reflect.get(target, name, receiver);
            }
        });
    }
    envGetter() {
        return new Proxy({}, {
            get(target, name, receiver) {
                return process.env[name.toString()];
            }
        });
    }
    nodeGetter() {
        const that = this;
        return new Proxy({}, {
            get(target, name, receiver) {
                return that.nodeDataGetter(name.toString());
            }
        });
    }
    getDataProxy() {
        const that = this;
        const base = {
            $binary: {},
            $data: {},
            $env: this.envGetter(),
            $node: this.nodeGetter(),
            $parameter: this.nodeParameterGetter(this.activeNodeName),
        };
        return new Proxy(base, {
            get(target, name, receiver) {
                if (name === '$data') {
                    return that.nodeDataGetter(that.activeNodeName, true).data;
                }
                else if (name === '$binary') {
                    return that.nodeDataGetter(that.activeNodeName, true).binary;
                }
                return Reflect.get(target, name, receiver);
            }
        });
    }
}
exports.WorkflowDataProxy = WorkflowDataProxy;
//# sourceMappingURL=WorkflowDataProxy.js.map