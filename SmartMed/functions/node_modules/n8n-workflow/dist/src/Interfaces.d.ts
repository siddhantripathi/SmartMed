import { Workflow } from './Workflow';
import * as express from "express";
export interface IBinaryData {
    [key: string]: string | undefined;
    data: string;
    mimeType: string;
    fileName?: string;
    fileExtension?: string;
}
export interface IConnection {
    node: string;
    type: string;
    index: number;
}
export interface IExecutionError {
    message: string;
    node?: string;
    stack?: string;
}
export interface IGetCredentials {
    get(type: string, name: string): Promise<ICredentialsEncrypted>;
}
export interface ICredentialNodeAccess {
    nodeType: string;
    user?: string;
    date?: number;
}
export interface ICredentialsDecrypted {
    name: string;
    type: string;
    nodesAccess: ICredentialNodeAccess[];
    data?: ICredentialDataDecryptedObject;
}
export interface ICredentialsEncrypted {
    name: string;
    type: string;
    nodesAccess: ICredentialNodeAccess[];
    data?: string;
}
export interface ICredentialType {
    name: string;
    displayName: string;
    properties: INodeProperties[];
}
export interface ICredentialTypes {
    credentialTypes?: {
        [key: string]: ICredentialType;
    };
    init(credentialTypes?: {
        [key: string]: ICredentialType;
    }): Promise<void>;
    getAll(): ICredentialType[];
    getByName(credentialType: string): ICredentialType;
}
export interface ICredentialData {
    name: string;
    data: string;
    nodesAccess: ICredentialNodeAccess[];
}
export declare type CredentialInformation = string | number | boolean;
export interface ICredentialDataDecryptedObject {
    [key: string]: CredentialInformation;
}
export declare type NodeInputConnections = IConnection[][];
export interface INodeConnections {
    [key: string]: NodeInputConnections;
}
export interface IConnections {
    [key: string]: INodeConnections;
}
export declare type GenericValue = string | object | number | boolean | undefined | null;
export interface IDataObject {
    [key: string]: GenericValue | IDataObject | GenericValue[] | IDataObject[];
}
export interface IExecuteData {
    data: ITaskDataConnections;
    node: INode;
}
export declare type IContextObject = {
    [key: string]: any;
};
export interface IExecuteContextData {
    [key: string]: IContextObject;
}
export interface IExecuteFunctions {
    getContext(type: string): IContextObject;
    getCredentials(type: string): ICredentialDataDecryptedObject | undefined;
    getInputData(inputIndex?: number, inputName?: string): INodeExecutionData[];
    getMode(): WorkflowExecuteMode;
    getNodeParameter(parameterName: string, itemIndex: number, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getWorkflowStaticData(type: string): IDataObject;
    getTimezone(): string;
    prepareOutputData(outputData: INodeExecutionData[], outputIndex?: number): Promise<INodeExecutionData[][]>;
    helpers: {
        [key: string]: (...args: any[]) => any;
    };
}
export interface IExecuteSingleFunctions {
    getContext(type: string): IContextObject;
    getCredentials(type: string): ICredentialDataDecryptedObject | undefined;
    getInputData(inputIndex?: number, inputName?: string): INodeExecutionData;
    getMode(): WorkflowExecuteMode;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getTimezone(): string;
    getWorkflowStaticData(type: string): IDataObject;
    helpers: {
        [key: string]: (...args: any[]) => any;
    };
}
export interface ILoadOptionsFunctions {
    getCredentials(type: string): ICredentialDataDecryptedObject | undefined;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getTimezone(): string;
    helpers: {
        [key: string]: ((...args: any[]) => any) | undefined;
    };
}
export interface IHookFunctions {
    getCredentials(type: string): ICredentialDataDecryptedObject | undefined;
    getMode(): WorkflowExecuteMode;
    getNodeWebhookUrl: (name: string) => string | undefined;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getTimezone(): string;
    getWebhookDescription(name: string): IWebhookDescription | undefined;
    getWorkflowStaticData(type: string): IDataObject;
    helpers: {
        [key: string]: (...args: any[]) => any;
    };
}
export interface ITriggerFunctions {
    emit(data: INodeExecutionData[][]): void;
    getCredentials(type: string): ICredentialDataDecryptedObject | undefined;
    getMode(): WorkflowExecuteMode;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getTimezone(): string;
    getWorkflowStaticData(type: string): IDataObject;
    helpers: {
        [key: string]: (...args: any[]) => any;
    };
}
export interface IWebhookFunctions {
    getBodyData(): IDataObject;
    getCredentials(type: string): ICredentialDataDecryptedObject | undefined;
    getHeaderData(): object;
    getMode(): WorkflowExecuteMode;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getQueryData(): object;
    getRequestObject(): express.Request;
    getResponseObject(): express.Response;
    getTimezone(): string;
    getWorkflowStaticData(type: string): IDataObject;
    prepareOutputData(outputData: INodeExecutionData[], outputIndex?: number): Promise<INodeExecutionData[][]>;
    helpers: {
        [key: string]: (...args: any[]) => any;
    };
}
export interface INodeCredentials {
    [key: string]: string;
}
export interface INode {
    name: string;
    typeVersion: number;
    type: string;
    position: [number, number];
    disabled?: boolean;
    continueOnFail?: boolean;
    parameters: INodeParameters;
    credentials?: INodeCredentials;
}
export interface INodes {
    [key: string]: INode;
}
export interface IObservableObject {
    [key: string]: any;
    __dataChanged: boolean;
}
export interface IBinaryKeyData {
    [key: string]: IBinaryData;
}
export interface INodeExecutionData {
    [key: string]: IDataObject | IBinaryKeyData | undefined;
    json: IDataObject;
    binary?: IBinaryKeyData;
}
export interface INodeExecuteFunctions {
    getExecuteTriggerFunctions(workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode): ITriggerFunctions;
    getExecuteFunctions(workflow: Workflow, runExecutionData: IRunExecutionData, runIndex: number, connectionInputData: INodeExecutionData[], inputData: ITaskDataConnections, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode): IExecuteFunctions;
    getExecuteSingleFunctions(workflow: Workflow, runExecutionData: IRunExecutionData, runIndex: number, connectionInputData: INodeExecutionData[], inputData: ITaskDataConnections, node: INode, itemIndex: number, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode): IExecuteSingleFunctions;
    getExecuteHookFunctions(workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, isTest?: boolean): IHookFunctions;
    getExecuteWebhookFunctions(workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode): IWebhookFunctions;
}
export declare type NodeParameterValue = string | number | boolean;
export interface INodeParameters {
    [key: string]: NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[];
}
export declare type NodePropertyTypes = 'boolean' | 'collection' | 'color' | 'dateTime' | 'fixedCollection' | 'json' | 'multiOptions' | 'number' | 'options' | 'string';
export interface INodePropertyTypeOptions {
    alwaysOpenEditWindow?: boolean;
    loadOptionsMethod?: string;
    maxValue?: number;
    minValue?: number;
    multipleValues?: boolean;
    multipleValueButtonText?: string;
    numberPrecision?: number;
    numberStepSize?: number;
    password?: boolean;
    rows?: number;
    [key: string]: boolean | number | string | undefined;
}
export interface IDisplayOptions {
    hide?: {
        [key: string]: NodeParameterValue[];
    };
    show?: {
        [key: string]: NodeParameterValue[];
    };
}
export interface INodeProperties {
    displayName: string;
    name: string;
    type: NodePropertyTypes;
    typeOptions?: INodePropertyTypeOptions;
    default: NodeParameterValue | INodeParameters | INodeParameters[] | NodeParameterValue[];
    description?: string;
    displayOptions?: IDisplayOptions;
    options?: Array<INodePropertyOptions | INodeProperties | INodePropertyCollection>;
    placeholder?: string;
    isNodeSetting?: boolean;
    noDataExpression?: boolean;
    required?: boolean;
}
export interface INodePropertyOptions {
    name: string;
    value: string;
    description?: string;
}
export interface INodePropertyCollection {
    displayName: string;
    name: string;
    values: INodeProperties[];
}
export interface ITriggerResponse {
    closeFunction?: () => Promise<void>;
    manualTriggerFunction?: () => Promise<void>;
    manualTriggerResponse?: Promise<INodeExecutionData[][]>;
}
export interface INodeType {
    description: INodeTypeDescription;
    execute?(this: IExecuteFunctions): Promise<INodeExecutionData[][] | null>;
    executeSingle?(this: IExecuteSingleFunctions): Promise<INodeExecutionData>;
    trigger?(this: ITriggerFunctions): Promise<ITriggerResponse | undefined>;
    webhook?(this: IWebhookFunctions): Promise<IWebhookResonseData>;
    hooks?: {
        [key: string]: (this: IHookFunctions) => Promise<boolean>;
    };
    methods?: {
        loadOptions?: {
            [key: string]: (this: ILoadOptionsFunctions) => Promise<INodePropertyOptions[]>;
        };
    };
    webhookMethods?: {
        [key: string]: IWebhookSetupMethods;
    };
}
export declare type WebhookSetupMethodNames = 'checkExists' | 'create' | 'delete';
export interface IWebhookSetupMethods {
    [key: string]: ((this: IHookFunctions) => Promise<boolean>) | undefined;
    checkExists?: (this: IHookFunctions) => Promise<boolean>;
    create?: (this: IHookFunctions) => Promise<boolean>;
    delete?: (this: IHookFunctions) => Promise<boolean>;
}
export interface INodeCredentialDescription {
    name: string;
    required?: boolean;
    displayOptions?: IDisplayOptions;
}
export declare type INodeIssueTypes = 'credentials' | 'execution' | 'parameters' | 'typeUnknown';
export interface INodeIssueObjectProperty {
    [key: string]: string[];
}
export interface INodeIssueData {
    node: string;
    type: INodeIssueTypes;
    value: boolean | string | string[] | INodeIssueObjectProperty;
}
export interface INodeIssues {
    execution?: boolean;
    credentials?: INodeIssueObjectProperty;
    parameters?: INodeIssueObjectProperty;
    typeUnknown?: boolean;
    [key: string]: undefined | boolean | INodeIssueObjectProperty;
}
export interface IWorfklowIssues {
    [key: string]: INodeIssues;
}
export interface INodeTypeDescription {
    displayName: string;
    name: string;
    icon?: string;
    group: string[];
    version: number;
    description: string;
    defaults: INodeParameters;
    inputs: string[];
    outputs: string[];
    outputNames?: string[];
    properties: INodeProperties[];
    credentials?: INodeCredentialDescription[];
    maxNodes?: number;
    hooks?: {
        [key: string]: INodeHookDescription[] | undefined;
        activate?: INodeHookDescription[];
        deactivate?: INodeHookDescription[];
    };
    webhooks?: IWebhookDescription[];
}
export interface INodeHookDescription {
    method: string;
}
export interface IWebhookData {
    httpMethod: WebhookHttpMethod;
    node: string;
    path: string;
    webhookDescription: IWebhookDescription;
    workflow: Workflow;
    workflowExecuteAdditionalData: IWorkflowExecuteAdditionalData;
}
export interface IWebhookDescription {
    [key: string]: WebhookHttpMethod | WebhookResponseMode | string | undefined;
    httpMethod: WebhookHttpMethod | string;
    name: string;
    path: string;
    responseBinaryPropertyName?: string;
    reponseMode?: WebhookResponseMode | string;
    reponseData?: WebhookResponseData | string;
}
export declare type WebhookHttpMethod = 'GET' | 'POST';
export interface IWebhookResonseData {
    workflowData?: INodeExecutionData[][];
    webhookResponse?: any;
    noWebhookResponse?: boolean;
}
export declare type WebhookResponseData = 'allEntries' | 'firstEntryJson' | 'firstEntryBinary';
export declare type WebhookResponseMode = 'onReceived' | 'lastNode';
export interface INodeTypesObject {
    [key: string]: INodeType;
}
export interface INodeTypes {
    init(nodeTypes?: INodeTypesObject): Promise<void>;
    getAll(): INodeType[];
    getByName(nodeType: string): INodeType | undefined;
}
export interface IRun {
    data: IRunExecutionData;
    finished?: boolean;
    mode: WorkflowExecuteMode;
    startedAt: number;
    stoppedAt: number;
}
export interface IRunExecutionData {
    startData?: {
        destinationNode?: string;
        runNodeFilter?: string[];
    };
    resultData: {
        error?: IExecutionError;
        runData: IRunData;
        lastNodeExecuted?: string;
    };
    executionData?: {
        contextData: IExecuteContextData;
        nodeExecutionStack: IExecuteData[];
        waitingExecution: IWaitingForExecution;
    };
}
export interface IRunData {
    [key: string]: ITaskData[];
}
export interface ITaskData {
    startTime: number;
    executionTime: number;
    data?: ITaskDataConnections;
    error?: IExecutionError;
}
export interface ITaskDataConnections {
    [key: string]: Array<INodeExecutionData[] | null>;
}
export interface IWaitingForExecution {
    [key: string]: {
        [key: number]: ITaskDataConnections;
    };
}
export interface IWorkflowCredentials {
    [key: string]: {
        [key: string]: ICredentialsEncrypted;
    };
}
export interface IWorkflowExecuteHooks {
    afterExecute?(data: IRun, waitingExecutionData: IWaitingForExecution): Promise<void>;
}
export interface IWorkflowExecuteAdditionalData {
    credentials: IWorkflowCredentials;
    encryptionKey: string;
    hooks?: {
        [key: string]: Array<((...args: any[]) => Promise<void>)> | undefined;
        nodeExecuteAfter?: Array<((executionId: string, nodeName: string, data: ITaskData) => Promise<void>)>;
        nodeExecuteBefore?: Array<((nodeName: string, executionId: string) => Promise<void>)>;
        workflowExecuteAfter?: Array<((data: IRun, executionId: string) => Promise<void>)>;
        workflowExecuteBefore?: Array<((executionId: string) => Promise<void>)>;
    };
    httpResponse?: express.Response;
    httpRequest?: express.Request;
    timezone: string;
    webhookBaseUrl: string;
    webhookTestBaseUrl: string;
}
export declare type WorkflowExecuteMode = 'cli' | 'error' | 'internal' | 'manual' | 'retry' | 'trigger' | 'webhook';
export interface IWorkflowSettings {
    [key: string]: IDataObject | string | number | boolean | undefined;
}
