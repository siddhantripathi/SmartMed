{
  "name": "Drug Interaction Check",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "drug-interaction-check",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "medications",
              "value": "={{ $json.medications }}"
            },
            {
              "name": "supplements",
              "value": "={{ $json.supplements }}"
            }
          ]
        },
        "options": {}
      },
      "id": "set-data",
      "name": "Set Medication Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "functionCode": "const medications = items[0].json.medications || [];\nconst supplements = items[0].json.supplements || [];\n\n// Normalize medication names using RxNorm\nconst normalizedMeds = await Promise.all(\n  medications.map(async (med) => {\n    try {\n      const response = await fetch(`https://rxnav.nlm.nih.gov/REST/drugs.json?name=${encodeURIComponent(med.name)}`);\n      const data = await response.json();\n      if (data?.drugGroup?.conceptGroup) {\n        med.rxnormId = data.drugGroup.conceptGroup[0]?.conceptProperties?.[0]?.rxcui;\n      }\n      return med;\n    } catch (error) {\n      console.error('Error normalizing medication:', med.name, error);\n      return med;\n    }\n  })\n);\n\nreturn [{ json: { medications: normalizedMeds, supplements } }];"
      },
      "id": "normalize-medications",
      "name": "Normalize Medications",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "functionCode": "const medications = items[0].json.medications || [];\nconst supplements = items[0].json.supplements || [];\nconst interactions = [];\n\n// Check interactions using NIH DailyMed API\nfor (const med of medications) {\n  for (const supp of supplements) {\n    try {\n      // This would integrate with actual medical APIs\n      // For demo purposes, we'll simulate some interactions\n      const mockInteractions = await checkMockInteractions(med, supp);\n      interactions.push(...mockInteractions);\n    } catch (error) {\n      console.error('Error checking interaction:', med.name, supp.name, error);\n    }\n  }\n}\n\n// Function to simulate interaction checking (replace with real APIs)\nasync function checkMockInteractions(medication, supplement) {\n  // This is a simplified mock - in production, integrate with:\n  // - FDA Orange Book API\n  // - NIH DailyMed API\n  // - RxNorm API\n  // - OpenFDA API\n  \n  const mockInteractions = [\n    {\n      medicationId: medication.id,\n      supplementId: supplement.id,\n      medicationName: medication.name,\n      supplementName: supplement.name,\n      severityLevel: 'medium',\n      description: `${supplement.name} may interact with ${medication.name}. Monitor for side effects.`,\n      recommendation: 'Consult your healthcare provider before combining these medications.',\n      source: 'Medical Database'\n    }\n  ];\n  \n  return mockInteractions;\n}\n\nreturn [{ json: { interactions } }];"
      },
      "id": "check-interactions",
      "name": "Check Interactions",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "functionCode": "const interactions = items[0].json.interactions || [];\n\n// Process interactions with Vertex AI for severity analysis\n// This would integrate with Google Cloud Vertex AI\n\nconst processedInteractions = await Promise.all(\n  interactions.map(async (interaction) => {\n    // Simulate AI processing for severity and recommendations\n    interaction.severityLevel = analyzeSeverity(interaction);\n    interaction.recommendation = enhanceRecommendation(interaction);\n    return interaction;\n  })\n);\n\n// Helper functions\nfunction analyzeSeverity(interaction) {\n  // This would use AI to analyze interaction severity\n  // For demo, return mock severity\n  return 'medium';\n}\n\nfunction enhanceRecommendation(interaction) {\n  // This would use AI to provide better recommendations\n  return 'Consult healthcare provider and monitor for adverse effects.';\n}\n\nreturn [{ json: { interactions: processedInteractions } }];"
      },
      "id": "process-with-ai",
      "name": "Process with AI",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "functionCode": "const interactions = items[0].json.interactions || [];\n\n// Store interactions in Firestore\nconst storedInteractions = [];\n\nfor (const interaction of interactions) {\n  try {\n    // This would make HTTP request to Firebase Cloud Function\n    // to store interaction in Firestore\n    const response = await fetch('https://us-central1-smartmed-dev.cloudfunctions.net/storeInteraction', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(interaction)\n    });\n    \n    if (response.ok) {\n      storedInteractions.push(interaction);\n    }\n  } catch (error) {\n    console.error('Error storing interaction:', error);\n  }\n}\n\nreturn [{ json: { storedInteractions } }];"
      },
      "id": "store-interactions",
      "name": "Store Interactions",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "functionCode": "const interactions = items[0].json.storedInteractions || [];\n\n// Send alerts for high/critical interactions\nfor (const interaction of interactions) {\n  if (['high', 'critical'].includes(interaction.severityLevel)) {\n    try {\n      // Trigger Firebase Cloud Messaging\n      await fetch('https://us-central1-smartmed-dev.cloudfunctions.net/sendAlert', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          userId: interaction.userId,\n          interactionId: interaction.id,\n          message: `Critical interaction detected: ${interaction.description}`\n        })\n      });\n    } catch (error) {\n      console.error('Error sending alert:', error);\n    }\n  }\n}\n\nreturn [{ json: { success: true } }];"
      },
      "id": "send-alerts",
      "name": "Send Alerts",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Set Medication Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Medication Data": {
      "main": [
        [
          {
            "node": "Normalize Medications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Medications": {
      "main": [
        [
          {
            "node": "Check Interactions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Interactions": {
      "main": [
        [
          {
            "node": "Process with AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process with AI": {
      "main": [
        [
          {
            "node": "Store Interactions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Interactions": {
      "main": [
        [
          {
            "node": "Send Alerts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {},
  "staticData": null
}
